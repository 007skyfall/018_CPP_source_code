【1】自我介绍
【2】C++   --》五天
	C++基本语法
	1. 认识C++
	2. 数据类型
	3. 条件语句
	4. 函数
	5. 封装，继承，多态
【3】如何学习C++
	多练习，掌握C++语言的基本用法
	
【4】C++的重要性
	1. C++的江湖地位  TIOBE发布语言排行榜
	2. C++应用场合
		2.1 游戏开发
		2.2 科学计算
		2.3 QT开发
		2.4 ROS  -Robot System  机器人操作系统
		2.5 比较适合大型程序的开发
		
	3. C++的发展历程
		Bjarne Stroustrup  C++之父
		C++语言标准：1998年  C++98
		
		前提可以上网：ping www.baidu.com
		sudo apt-get install g++
		sudo apt-get update
		
【5】C++和C语言的异同
	相同:
	1. 都属于编译型语言
	2. 都属于强类型语言，C++更强
		eg：
		char *str = malloc(10);
		C编译不会报错，C++会报错
	不通点：
	1. C语言是面向过程，C++面向对象
	2. C++语言完全兼容C语言，去除C语言中不好的特性，
		添加一些好的特性。

【6】第一个C++代码
	1. C++代码的编译方式：
		g++ cplusplus.cpp   常用
		gcc cplusplus.cpp -lstdc++
	2. C++的后缀
		.cpp    常用
		.cc 
		.C 
		.cxx
	3. C++的头文件
		<iostream>
		i:input   输入
		o:output   输出
		stream：流
		
		由于C++兼容C
		#include <stdio.h>
			       |
		#include <cstdio>
		
	4. C++中的标准输入和输出
		cout：标准输出  
		cout看成一个对象，表示屏幕
		<< :表示数据的流向
		
		endl(end of line):结束并且换行
		
		cin：标准输入  
		cin看成一个对象，表示输入设备
		>> : 表示数据的流向
		
		cout和cin可以级联输出
		printf("%d,%d",num1,num2);
		
		cout和cin不需要制定数据的类型，
		编译器会自动的识别
		
	5. std::
		std是标准名字空间的名字，
		而cout，cin，endl都属于std名字空间中的内容，
		如果要使用标准名字空间中的内容，需要加std::

【7】名字空间		
	1. 为什么使用名字空间？
		在做大型程序开发是，防止不用的工程师，
		可以回出现相同的函数，限制作用域
	2. 名字空间的定义
		namespace 名字空间的名字 {
			名字空间成员1;
			名字空间成员2；
			.....
		}
		名字空间的成员可以是全局变量，可以函数，
		可以是自定义的数据类型，嵌套的名字空间。
		
		namespace                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              std{
			cout;
			cin;
			endl;
		}
		
	3. 名字空间的使用 
		语法：名字空间名::名字空间中的成员;
		:: -->作用域限定符
		
	4. 名字空间的指令
		语法：using namespace 名字空间名;
		此语句下边的所有语句可以直接使用名字空间中的成员。
		据不需要加名字空间和作用域限定符。
		eg ： 
		cout << "Hi C++" << endl;  // 错误
		using namespace std;
		cout << "Hi C++" << endl;
		
		名字空间指令常用与标准名字空间
		
		#include <iostream>
		using namespace std:
		
	5. 名字空间的声明
		语法：using 名字空间名::名字空间成员;
		名字空间中的这个成员，在后边都是可以使用的。
		
		eg：
		using  std::cout;
		
	6. 无名名字空间
		全局变量，和函数等没有指定到任何的名字空间中，
		编译器会将其定义为无名名字空间。
		如何访问：
		直接使用
		::无名名字空间的成员。
		
		eg：
		
		int num = 100;
		
		void print()
		{
			int num = 200;
			cout << num << endl; // 200
			cout << ::num << endl;  // 100		
		}
		
	7. 名字空间的嵌套
		名字空间的嵌套，实际开发基本上用不到，
		eg：
		namespace  ns1 {
			int num1;
			namespace ns2{
				int num2;
				namespace ns3{
					int num3;
				}
			}	
		}
		
		ns1::ns2::num2
		ns1::ns2::ns3::num3
		
		using namespace ns1;
		using namespace ns2;
		using namespace ns3;
		
		using ns1::ns2::ns3::num3
	
【8】数据类型 
	兼容C的数据类型
	
【9】结构体，联合体，枚举
	1. 结构体 
	struct A {
		结构体成员;
		C++结构体的成员可以有函数
	};
	
	
	struct A a;  C语言风格
	A a;  C++风格，可以省略struct关键字
	
	总结：
	1. 定义结构体类型变量时，可以省略struct关键字 
	2. 结构体成员可以是一个函数
	3. 结构体中的成员函数，可以直接访问结构体中的变量
	4. 结构体中的成员函数，在代码段，不占用结构体的大小

	2. 联合体 
		union A {
			成员1;
			....
			unsigned int x;
			unsigned char[4];	
		};
		A a;   定义联合体类型的变量
		
		1. 可以省略关键字union
		
		C++之父，做C++开发，不建议使用联合体
		因为联合体的空间是共享的，C++之父，认为不安全。
		
		例子：测试大小端
		
	3. 枚举 enum
		enum en{
			成员1,   0
			成员2,   1
			成员3 = 10,
			成员4,  11 
		};
		
		1. 定义枚举类型的变量，可以省略关键字enum
		2.  enum en c;
			c = 成员1;
			成员2;   //	C++可以直接使用枚举中的成员
			c = 1;   // c可以，C++不支持
	总结：
		C++社区，建议C++开发是不要使用宏定义
		
		可以使用枚举代替宏定义
【10】字符串的表示
	1. C语言表示字符串的方法
		1> 双引号  "hello world"
		2> 字符指针  char* str = "hello world";
		3> 字符数组  char str[] = "hello world";
	
	2. C++中引入一个新的表示字符串的类 类型
		
		关键字 ： string 
		
		1. 字符串的定义
		
		string str = "hello world";
		
		字符串的空间，由编译器自动分配
		
		2. 字符串的操作
		
		“=”
		“+=”
		“==”
		3. string类类型的包含很多成员，size();
		
		size():计算字符串的长度,不包含\0
		
		class string{
		
			int  size(....){....}
		};
		string str = "hello world";
		str.size();
			
		struct A {
			int num：
			void print(){....}
		};
		
		A a;
		
		a.print()
		
		4. string类型的字符串可以当字符数组使用，
			可以通过下标直接访问
		
		访问：变量名[下标]
		
	注意：对字符串进行操作时，不需要考虑字符串的长度，

【11】bool类型
		1. bool类型是C++中的基本类型，不需要头文件，
			可以直接使用   true = 1  false = 0
			c++中可以直接使用 true 和 false
			
		C中使用bool类型加头文件<stdbool.h>
			
		2. bool类型的变量占1个字节
		
		3. bool类型可以接收任何值
			如果是非零  结果为1
			如果是令，  结果为0

【12】类型转换		
	1. 隐士类型转换
		编译器根据自己内部的规则自动完成类型的转换
		eg：
		int a;
		char ch = 100；
		
		a = ch;  编译器完成隐士类型转换
				
	2. 显示类型转换
		如果编译器无法完成隐士类型转换需要显示类型转换。
		强制类型转换。
		eg：
		int a;
		char ch = 100；
		
		a = (int)ch;    C风格的强制类型转换
		a = int(ch);    // C++风格的强制类型转换
		
		char* name = (char*)(malloc(sizeof(char)*20));

【13】引用
	1. 引用的定义和语法
		语法格式： 数据类型  & 引用的名字 = 引用的目标;
		int A
		int &B = A;
		
	
		引用本身就是一个别名，对引用的操作，
		相当于对引用的目标直接进行操作。
		
		引用和引用的目标指向的是同一块地址空间。
		引用本身不在占用任何的内存空间
	
	2. 引用的使用 
		1. 引用在声明的时候，必须指定引用的目标
		2. 引用的类型和引用的目标的数据类型必须一致
		3. 引用的目标一但被指定，引用的目标不可以修改。
		
		int a = 100;
		int a1 = 200;
		char ch = 50;
		//int &b;编译报错，引用声明是必须指定引用的目标
		int &b = a;
		//int &c = c;//编译器报错  类型不一致
		b = a1;  // 进行赋值操作
		
		int&  引用类型
		char* 指针类型
		
	3. 引用的好处
		1. 节约系统调用的内存消耗,
			提高代码的执行效率
		void swap1(int *x, int *y)
		{
			
		}
		
		void swap1(int &x, int &y)
		{
			
		}
		int main()
		{
			int a = 100,b = 200;
			swap1(&a, &b);
			swap2(a,b);	
		}
		
	4. 常引用
		eg：
		
		int a = 100;
		const int& b = a;
		// b = 200;  // 编译器直接报错
		a = 200;  // 没有问题
		
		使用const修饰的引用，不可以通过修改引用
		而修改引用的目标。
		可以直接操作变量。
		
【14】C++中的条件语句和循环语句，跟C中完全一致。

【15】C++中的函数
	1. C++中的函数重载
	
	C语言
	eg：
	void drawCircle(int x, int y, int r){.....}
	void drawDect(int x, int y, int w, int h){.....}
	
	C++原因：C++使用函数的重载
	void drawImage(int x, int y, int r){.....}
	void drawImage(int x, int y, short r){.....}
	void drawImage(int x, int y, int w, int h){.....}
	
	
	drawImage(3,4,5);
	drawImage(3,4,5,6);
	
	2. 函数重载的定义
		函数的作用域相同，函数的名字相同，参数不同，
		这个的函数就构成了函数的重载。
		
		注意： 跟函数的返回值没有关系
		
		满足函数重载的三个条件：
		1》相同的作用域
		2》相同的函数名
		3》函数的参数不同，
			1.参数的个数不同，
			2.参数的类型不同
	
	3. 函数重载的原理
		nm a.out  查看符号表
		objdump  -D a.out > a.dis 查看反汇编文件
		
		C++编译器在编译的时候，对函数名进行修改
		_Z9drawImageiii：
		
		_z9:不用关系，编译器自动添加
		drawImage:函数名字
		iii：函数的形参的类型的首字母
		
	4. 函数重载的匹配
	
		完全匹配  > 常量匹配 > 升级匹配 > 降级匹配 > 省略号匹配
	
	作业：
		掌握今天内容
		
	
	明天：
		函数 
		动态内存的分配
		面向对象---》类和对象的概念
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	

	
		
		
		
		

	
	
	
	
	
	
	
	